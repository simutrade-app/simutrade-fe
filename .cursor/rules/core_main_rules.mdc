---
description: core rules for this code base
globs: 
alwaysApply: false
---
- **Project Context: Google Solution Challenge**
    - This project is an entry for the Google Solution Challenge. Adherence to high-quality development practices is paramount.
    - The solution aims to address a critical social challenge and achieve a positive social impact.
    - Innovation, originality, and the potential for disruption are key evaluation criteria.

- **Technical Merit (Key Focus - 40%)**
    - **Google AI Technology Utilization**:
        - Effectively and creatively integrate Gemini or Gemma.
        - Usage of mandatory Google AI tools is expected. Leveraging additional Google AI technology thoughtfully can increase the solution's scope and impact.
        - The integration should be seamless and impactful to the overall functionality.
    - **Coding Expertise**:
        - All code must be **well-written, efficient, and maintainable**.
        - Prioritize clarity and readability. Follow consistent coding conventions.
    - **Strict Modularity**:
        - Design components and modules with clear separation of concerns.
        - Aim for high cohesion within modules and low coupling between them. This is crucial for maintainability and scalability.
    - **Scalability and Sustainability**:
        - Design the solution with future improvements and wider adoption in mind.
        - Ensure the architecture supports scaling effectively.

- **User Experience (UX - 10%)**
    - **Intuitive Interface**:
        - The user interface must be user-friendly, accessible, and pleasant to interact with.
    - **Seamless AI Integration**:
        - The integration of Google AI tools should feel natural and significantly enhance the user experience.

- **Development Environment & Command Execution**:
    - **Crucial**: All frontend development commands, including `npm install`, `npm run dev`, `npx shadcn@latest init`, etc., **must be executed from within the `simutrade-frontend` directory**. Running these commands from the project root (`CODE`) or other directories will lead to errors or incorrect project setup.
    - Always verify your current working directory in the terminal before running commands that modify the frontend project or its dependencies.

- **Commenting Guidelines**
    - **Minimize Comments**:
        - Strive for self-documenting code.
        - Avoid comments that merely restate what the code is doing if it's clear from the code itself.
        - Comments should primarily explain *why* a particular, non-obvious approach was taken, or clarify complex algorithms or business logic.
    - **English Only**:
        - All comments, if deemed necessary, **must be written in English**. This applies to all code, configuration files, and documentation within the project.
    - **Example**:
      ```javascript
      // ❌ DON'T:
      // increment i
      i++;

      // ✅ DO (if the logic is complex or the reasoning isn't immediately obvious):
      // Optimized search algorithm for this specific dataset structure.
      // Details on trade-offs can be found in [link to design doc or issue].
      function customSearch(data, term) {
        // ... complex logic ...
      }
      ```

- **General Best Practices**
    - Adhere to established design patterns where appropriate.
    - Write unit and integration tests to ensure code reliability and facilitate refactoring. (Refer to `tests.mdc` if a specific testing rule exists).
    - Regularly review and refactor code to maintain high quality and address any emerging technical debt.
    - Ensure all code, including HTML and CSS, is clean and follows best practices for accessibility and performance.

- **Alignment With Cause (25%) & Innovation (25%)**
    - While these rules primarily focus on technical aspects, remember that the solution must effectively address a critical social challenge and demonstrate innovation and originality. Technical choices should support these overarching goals.

